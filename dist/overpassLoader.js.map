{"version":3,"sources":["../src/overpassLoader.js"],"names":[],"mappings":"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","file":"overpassLoader.js","sourcesContent":["\nclass OverpassLoader {\n    constructor() {\n        this.nodes = {};\n        this.ways = [];\n    }\n\n    buildNode(n) {\n        this.nodes['_' + n.id] = {\n            id: n.id,\n            lat: n.lat,\n            lng: n.lng\n        };\n    }\n\n    nodeToVertex(n) {\n\n    }\n\n    wayToEdges(n) {\n\n    }\n\n    buildWay(w) {\n        const way = {\n            id: w.id,\n            tags: w.tags\n        };\n        way.nodes = w.nodes.map((id, i, array) => {\n            const node = this.nodes['_' + id];\n            if(i === 0 || i === array.length - 1) {\n                node.isExtremity = true;\n            } else {\n                if(!node.isPartOfWays) { node.isPartOfWays = []; }\n                node.isPartOfWays.push(way);\n            }\n            return node;\n        });\n        this.ways.push(way);\n    }\n\n    normalizeTopology() {\n        function markWaysToSplitAt(node) {\n            node.isPartOfWays.forEach(wId => {\n                const way = this.ways[wId];\n                way.splitAt = way.splitAt ? way.splitAt.concat(node) : [node];\n            });\n        }\n\n        const nodeKeys = Object.keys(this.nodes);\n        nodeKeys.forEach(k => {\n            const node = this.nodes[k];\n            if (!node.isExtremity) {\n                if (!node.isPartOfWays) {\n                    // isolated node => remove\n                    delete this.nodes[k];\n                } else if (node.isPartOfWays.length === 1) {\n                    // only shape node => mark them for deletion after coords have been extracted\n                    node.isShapeNode = true;\n                } else {\n                    markWaysToSplitAt(node);\n                }\n            } else if(node.isPartOfWays) {\n                markWaysToSplitAt(node);\n            }\n        });\n\n        const wayKeys = Object.keys(this.ways);\n        wayKeys.forEach(k => {\n            const way = this.ways[k];\n            if(!way.splitAt) { return; }\n            delete this.ways[k];\n        });\n    }\n\n    splitWayAt(way, node) {\n        const nodes = way.nodes;\n        const i = nodes.indexOf(node);\n        return [\n            {\n                id: way.id + 'a',\n                nodes: nodes.slice(0, i + 1),\n                tags: way.tags\n            },\n            {\n                id: way.id + 'b',\n                nodes: nodes.slice(i),\n                tags: way.tags\n            }\n        ];\n    }\n\n    buildGraph(overpassResult) {\n        this.nodes = {};\n        this.ways = [];\n\n        const elements = overpassResult.elements;\n        console.log('Load nodes...');\n        elements.filter(e => e.type === 'node').forEach(e => {\n            this.buildNode(e);\n        });\n\n        console.log('Load ways...');\n        elements.filter(e => e.type === 'way').forEach(e => {\n            this.buildWay(e);\n        });\n\n        console.log(this.ways);\n        //\n        // console.log('Convert OSM graph-like to graph structure...');\n        // this.normalizeTopology();\n    }\n}\n\nexport default OverpassLoader;\n"]}